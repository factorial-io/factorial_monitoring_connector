<?php
/**
 * @file
 * All public methods/hooks to provide a connector to the factorial monitoring service.
 */

define('FMC_CACHE_LIFETIME', -1);

/**
 * Implementation of hook_menu().
 */
function factorial_monitoring_connector_menu() {
  return array(
    'admin/monitor-state' => array(
      'page callback' => 'factorial_monitoring_connector_get_results',
      'access callback' => 'factorial_monitoring_connector_access_callback',
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Menu access callback.
 */
function factorial_monitoring_connector_access_callback() {
  return TRUE;
}

/**
 * Get the client version.
 */
function factorial_monitoring_connector_get_client_version() {
  return '1.1.0';
}

/**
 * Private implementation to get results.
 */
function _factorial_monitoring_connector_get_results() {

  $cache_key = 'factorial_monitoring_connector_results';
  if ((FMC_CACHE_LIFETIME > 0) && ($data = cache_get($cache_key))) {
    if ($data->expire >= time()) {
      return $data->data;
    }
  }

  $results = module_invoke_all('factorial_monitoring_collect_values');

  drupal_alter('factorial_monitoring_collect_values', $results);

  $return = array(
    'results' => $results,
    'version' => factorial_monitoring_connector_get_client_version(),
    'ts' => time(),
  );

  if (FMC_CACHE_LIFETIME > 0) {
    cache_set($cache_key, $return, 'cache', time() + FMC_CACHE_LIFETIME);
  }

  return $return;
}


/**
 * Implements the page callback. Collect all results and return them as JSON.
 */
function factorial_monitoring_connector_get_results() {
  $return = _factorial_monitoring_connector_get_results();

  // Disable caching.
  drupal_page_is_cacheable(FALSE);

  $return = factorial_monitoring_connector_encrypt($return);

  // Create response.
  $json = json_encode($return);
  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  print $json;
  drupal_exit();
}

/**
 * Encrypt the results.
 *
 * @param $data
 *  The data.
 *
 * @return mixed
 *  The encrypted data.
 *
 * @throws \Defuse\Crypto\Exception\CryptoException
 */
function factorial_monitoring_connector_encrypt($data) {

    require_once __DIR__ . '/vendor/autoload.php';

    if (!class_exists(\Defuse\Crypto\Key::class)) {
        $data['encryptionNotSupported'] = TRUE;
        return $data;
    }
    try {
        //Load key into a Key object using Key's loadFromAsciiSafeString static method.
        $key = Defuse\Crypto\Key::loadFromAsciiSafeString("def0000017265d5ce1429e6987748d0ab48b35dade5626b04ec1dc4d724f8963192f90309327603758736a64c632a33aa90135f0b6d08e6bbee90063ff45ca9acdabf1ba");
        //Return the JSON representation of the data.
        $to_encrypt = json_encode($data['results']);
        //Encrypt the data with the Key, using defuse/php-encryption
        $cipherText = Defuse\Crypto\Crypto::encrypt($to_encrypt, $key);
        $data['results'] = $cipherText;
        $data['encrypted'] = TRUE;
    }
    catch (Defuse\Crypto\Exception\EnvironmentIsBrokenException $e) {
        throw new Defuse\Crypto\Exception\CryptoException($e->getMessage(), $e->getCode(), $e);
    }
    catch (Defuse\Crypto\Exception\BadFormatException $e) {
        throw new Defuse\Crypto\Exception\CryptoException($e->getMessage(), $e->getCode(), $e);
    }
    return $data;
}

/**
 * Implementation of hook_factorial_monitoring_collect_values().
 */
function factorial_monitoring_connector_factorial_monitoring_collect_values() {
  $result = array();

  $base_path = drupal_get_path('module', 'factorial_monitoring_connector') . '/collectors';
  $dir = scandir($base_path);

  foreach ($dir as $file) {
    $parts = pathinfo($file);
    if (($file[0] == '.') || ($parts['extension'] != 'inc')) {
      continue;
    }

    require_once $base_path . '/' . $file;
    $callback = 'factorial_monitoring_connector_collect_' . $parts['filename'];
    $query = $callback();

    if (!empty($query)) {
      if (isset($query['value'])) {
        $query = array($query);
      }
      $result = array_merge($result, $query);
    }
  }

  return $result;
}


/**
 * Implementation of hook_menu_site_status_alter().
 */
 function factorial_monitoring_connector_menu_site_status_alter(&$menu_site_status, $path) {
  // Allow access to admin/monitor-state even if site is in offline mode.
  if ($menu_site_status == MENU_SITE_OFFLINE && user_is_anonymous() && $path == 'admin/monitor-state') {
    $menu_site_status = MENU_SITE_ONLINE;
  }
}
